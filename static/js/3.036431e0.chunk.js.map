{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","utils/api.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/regenerator-runtime/runtime.js","containers/Item.js"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","baseURL","memoizedGetHackerNews","func","memo","_ref","regenerator_default","a","mark","_callee","_args","wrap","_context","prev","next","cache","has","t0","t1","t2","sent","set","call","abrupt","get","stop","_x","Map","memoizeAsync","endPoint","fetch","concat","res","json","catch","console","message","useHackerNewsEndpoint","endpoint","_useState","useState","_useState2","Object","slicedToArray","response","setResponse","_useState3","_useState4","setError","useEffect","didCancel","_fetchData","_callee2","data","_context2","fetchData","useUserItems","userId","useItem","itemId","module","exports","__webpack_require__","runtime","Op","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","state","GenStateSuspendedStart","method","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","_sent","dispatchException","record","tryCatch","type","GenStateSuspendedYield","makeInvokeMethod","obj","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","previousPromise","callInvokeWithMethodAndArg","invoke","result","__await","unwrapped","TypeError","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","constructor","displayName","isGeneratorFunction","genFun","ctor","name","setPrototypeOf","__proto__","awrap","async","iter","toString","keys","object","reverse","pop","skipTempReset","charAt","slice","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function","Item","_useItem","_useItem2","_Users_gesposito_Code_react_hacker_news_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","item","_useContext","useContext","StoreContext","store","dispatch","react__WEBPACK_IMPORTED_MODULE_1___default","createElement","isRead","favorites","includes","_reach_router__WEBPACK_IMPORTED_MODULE_2__","to","process","by","title","onClick","payload","src","url","style","width","height"],"mappings":"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","file":"static/js/3.036431e0.chunk.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import { useState, useEffect } from \"react\";\n\nconst getFromAPI = baseURL => endPoint =>\n  fetch(`${baseURL}${endPoint}`)\n    .then(res => res.json())\n    .catch(err => {\n      console.error(err.message);\n    });\n\nconst getHackerNews = getFromAPI(\"https://hacker-news.firebaseio.com/v0\");\n\nfunction memoizeAsync(func) {\n  const memo = async function(key) {\n    if (!memo.cache.has(key)) {\n      memo.cache.set(key, await func.apply(this, arguments));\n    }\n\n    return memo.cache.get(key);\n  };\n  memo.cache = new Map();\n  return memo;\n}\n\nconst memoizedGetHackerNews = memoizeAsync(getHackerNews);\n\nfunction useHackerNewsEndpoint(endpoint) {\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    let didCancel = false;\n\n    async function fetchData() {\n      const data = await memoizedGetHackerNews(endpoint);\n\n      if (!didCancel) {\n        setError(!data ? {\n          message: \"API Error\"\n        } : null);\n        setResponse(data);\n      }\n    }\n\n    fetchData();\n\n    return () => {\n      didCancel = true;\n    };\n  }, [endpoint]);\n\n  return [response, error];\n}\n\nconst useUserItems = userId => useHackerNewsEndpoint(`/user/${userId}.json`);\n\nconst useItem = itemId => useHackerNewsEndpoint(`/item/${itemId}.json`);\n\nexport default useHackerNewsEndpoint;\n\nexport { useUserItems, useItem };\n","module.exports = require(\"regenerator-runtime\");\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar runtime = function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n    return generator;\n  }\n\n  exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n\n  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n\n\n  var IteratorPrototype = {};\n\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = \"GeneratorFunction\"; // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      prototype[method] = function (arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function (genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n    // do is to check its .name property.\n    (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n  };\n\n  exports.mark = function (genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  }; // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n\n\n  exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n\n        if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function (value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function (err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function (unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function (error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise = // If enqueue has been called before, then we want to wait until\n      // all previous Promises have been resolved before calling invoke,\n      // so that results are always delivered in the correct order. If\n      // enqueue has not been called before, then it is important to\n      // call invoke immediately, without waiting on a callback to fire,\n      // so that the async generator function has the opportunity to do\n      // any necessary setup in a predictable way. This predictability\n      // is why the Promise constructor synchronously invokes its\n      // executor callback, and why async functions synchronously\n      // execute code before the first await. Since we implement simple\n      // async functions in terms of async generators, it is especially\n      // important to get this right, even though it requires care.\n      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n      // invocations of the iterator.\n      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    } // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n\n\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n\n  exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n\n  exports.async = function (innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));\n    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n    : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        } // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n        var record = tryCatch(innerFn, self, context);\n\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted; // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  } // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (!info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n      context.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    } // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n\n\n    context.delegate = null;\n    return ContinueSentinel;\n  } // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n\n\n  defineIteratorMethods(Gp);\n  Gp[toStringTagSymbol] = \"Generator\"; // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n  Gp[iteratorSymbol] = function () {\n    return this;\n  };\n\n  Gp.toString = function () {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      keys.push(key);\n    }\n\n    keys.reverse(); // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      } // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n\n\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n          return next;\n        };\n\n        return next.next = next;\n      }\n    } // Return an iterator with no values.\n\n\n    return {\n      next: doneResult\n    };\n  }\n\n  exports.values = values;\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: true\n    };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      this.prev = 0;\n      this.next = 0; // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n      this.method = \"next\";\n      this.arg = undefined;\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n    stop: function stop() {\n      this.done = true;\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" || record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      } // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n\n\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  }; // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n\n  return exports;\n}( // If this script is executing as a CommonJS module, use module.exports\n// as the regeneratorRuntime namespace. Otherwise create a new empty\n// object. Either way, the resulting object will be used to initialize\n// the regeneratorRuntime variable at the top of this file.\ntypeof module === \"object\" ? module.exports : {});\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}","import React, { useContext } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Link } from \"@reach/router\";\n\nimport { useItem } from \"../utils/api\";\nimport { StoreContext } from \"../utils/storeContext\";\n\nfunction Item({ itemId }) {\n  const [item, error] = useItem(itemId);\n  const { store, dispatch } = useContext(StoreContext);\n\n  if (error) {\n    return (\n      <div>\n        Ooops: {error.message} for {itemId}\n      </div>\n    );\n  }\n  if (!item) {\n    return <div>Loading Item {itemId}</div>;\n  }\n\n  const isRead = store.favorites.includes(itemId);\n\n  return (\n    <section>\n      <div>\n        <Link to={`${process.env.PUBLIC_URL}/user/${item.by}`}>&#8592; </Link>\n        <h1>{item.title}</h1>\n        <button\n          onClick={() =>\n            isRead\n              ? dispatch({ type: \"UNREAD\", payload: itemId })\n              : dispatch({ type: \"READ\", payload: itemId })\n          }\n        >\n          {isRead ? <span>&#9865; Read</span> : <span>&#9900; Not Read</span>}{\" \"}\n        </button>\n      </div>\n      \n      <iframe\n        title={item.title}\n        src={item.url}\n        style={{\n          width: \"100vw\",\n          height: \"100vh\"\n        }}\n      />\n    </section>\n  );\n}\n\nexport default Item;\n\nItem.propTypes = {\n  itemId: PropTypes.string.isRequired\n};\n"],"sourceRoot":""}
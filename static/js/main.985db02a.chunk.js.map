{"version":3,"sources":["App.js","serviceWorker.js","index.js","utils/storeContext.js"],"names":["UserSearch","React","lazy","__webpack_require__","e","then","bind","Item","App","react_default","a","createElement","storeContext","react","fallback","es","path","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","StoreContext","createContext","reducer","state","action","type","Object","_Users_gesposito_Code_react_hacker_news_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_2__","favorites","concat","_Users_gesposito_Code_react_hacker_news_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__","payload","index","indexOf","slice","Store","props","_useReducer","useReducer","_useReducer2","_Users_gesposito_Code_react_hacker_news_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","dispatch","react__WEBPACK_IMPORTED_MODULE_3___default","Provider","value","store","children"],"mappings":"uLAKMA,EAAaC,IAAMC,KAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YAC9BC,EAAON,IAAMC,KAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YAgBfE,MAdf,WACE,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,SAAD,CAAUC,SAAUL,EAAAC,EAAAC,cAAA,0BAClBF,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACX,EAAD,CAAYgB,KAAK,MACjBP,EAAAC,EAAAC,cAACX,EAAD,CAAYgB,KAAK,kBACjBP,EAAAC,EAAAC,cAACJ,EAAD,CAAMS,KAAK,sBCHDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC,wHEjIbC,EAAe/B,IAAMgC,gBAE3B,SAASC,EAAQC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,OACH,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFH,EADL,CAEEK,UAAS,GAAAC,OAAAH,OAAAI,EAAA,EAAAJ,CAAMH,EAAMK,WAAZ,CAAuBJ,EAAOO,YAE3C,IAAK,SACH,IAAMC,EAAQT,EAAMK,UAAUK,QAAQT,EAAOO,SAE7C,OAAe,IAAXC,EACKT,EAEFG,OAAAC,EAAA,EAAAD,CAAA,GACFH,EADL,CAEEK,UAAS,GAAAC,OAAAH,OAAAI,EAAA,EAAAJ,CACJH,EAAMK,UAAUM,MAAM,EAAGF,IADrBN,OAAAI,EAAA,EAAAJ,CAEJH,EAAMK,UAAUM,MAAMF,EAAQ,OAGvC,QACE,OAAOT,GAmBEY,IAff,SAAeC,GAAO,IAAAC,EACMC,qBAAWhB,EAAS,CAAEM,UAAW,KADvCW,EAAAb,OAAAc,EAAA,EAAAd,CAAAW,EAAA,GACbd,EADagB,EAAA,GACNE,EADMF,EAAA,GAGpB,OACEG,EAAA5C,EAAAC,cAACqB,EAAauB,SAAd,CACEC,MAAO,CACLC,MAAOtB,EACPkB,aAGDL,EAAMU","file":"static/js/main.985db02a.chunk.js","sourcesContent":["import React, { Suspense } from \"react\";\nimport { Router } from \"@reach/router\";\n\nimport Store from \"./utils/storeContext\";\n\nconst UserSearch = React.lazy(() => import(\"./containers/UserSearch\"));\nconst Item = React.lazy(() => import(\"./containers/Item\"));\n\nfunction App() {\n  return (\n    <Store>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Router>\n          <UserSearch path=\"/\" />\n          <UserSearch path=\"/user/:userId\" />\n          <Item path=\"/item/:itemId\" />\n        </Router>\n      </Suspense>\n    </Store>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useReducer } from \"react\";\n\nconst StoreContext = React.createContext();\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"READ\":\n      return {\n        ...state,\n        favorites: [...state.favorites, action.payload]\n      };\n    case \"UNREAD\":\n      const index = state.favorites.indexOf(action.payload);\n\n      if (index === -1) {\n        return state;\n      }\n      return {\n        ...state,\n        favorites: [\n          ...state.favorites.slice(0, index),\n          ...state.favorites.slice(index + 1)\n        ]\n      };\n    default:\n      return state;\n  }\n}\n\nfunction Store(props) {\n  const [state, dispatch] = useReducer(reducer, { favorites: [] });\n\n  return (\n    <StoreContext.Provider\n      value={{\n        store: state,\n        dispatch\n      }}\n    >\n      {props.children}\n    </StoreContext.Provider>\n  );\n}\n\nexport default Store;\n\nexport { StoreContext };\n"],"sourceRoot":""}